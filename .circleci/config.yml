version: 2.1
#Original Config.yml files
commands:
  destroy_environment:
    parameters:
      WhichEnd:
        description: frontend or backend 
        type: string   
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.WhichEnd>>-${CIRCLE_WORKFLOW_ID:0:8}
#  destroy-environment:
#    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
      # Add parameter here   
#    steps:
#      - run:
#          name: Destroy environments
#          when: on_fail
#          command: |
            # Your code here
#           exit 1

#  revert-migrations:
#    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
      # Add parameter here     
#    steps:
#      - run:
#          name: Revert migrations
          # Add when this will run
#          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#            SUCCESS = 1
#            if(( $SUCCESS==1 )); 
#            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
#              exit 1
#            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:16.11
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:16.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:16.11
    steps:
      # Checkout code from git
       - checkout
      # Restore from cache
       - restore_cache:
           keys: [frontend-build]
      # Your job code here
       - run: 
           name: Frontend test
           command: |
             cd frontend
             npm test        
  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:16.11
    steps:
      # Checkout code from git
       - checkout
      # Restore from cache
       - restore_cache:
           keys: [backend-build]
      # Your job code here
       - run: 
           name: Backend test
           command: |
             cd backend
             npm test 
            
  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:16.11
    steps:
      # Checkout code from git
       - checkout
      # Restore from cache
       - restore_cache:
           keys: [frontend-build]
      # Your job code here
       - run: 
           name: Frontend Audit
           command: |
             cd frontend
             npm audit fix --audit-level=critical --force  
  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:16.11
    steps:
      # Checkout code from git
       - checkout
      # Restore from cache
       - restore_cache:
           keys: [backend-build]
      # Your job code here
       - run: 
           name: Backend Audit
           command: |
             cd backend
             ##didn't run without force
             npm audit fix --audit-level=critical --force 

  deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: | 
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeople \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8} \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:8} \
              --region ${AWS_DEFAULT_REGION}
        - destroy_environment: 
            WhichEnd: "backend"
        - run:
            name: Ensure front-end infrastructure exists
            command: | 
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeople \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8} \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:8} \
              --region ${AWS_DEFAULT_REGION}
        - destroy_environment: 
            WhichEnd: "frontend"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              # Your code here
              #https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html
              aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --no-paginate --output text >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt
        - run:
            name: Persist Backend URL
            command: |
              # Your code here
              #https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html
              aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --no-paginate --output text >> ~/project/.circleci/ansible/backendURL.txt
              cat ~/project/.circleci/ansible/backendURL.txt
        - persist_to_workspace:
            root:  ~/
            paths: 
              - project/.circleci/ansible
      #Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["04:ba:16:8d:68:13:6f:97:f7:f6:16:ee:c0:be:ec:10"] # From Additional Key added based on udacity.pem
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
            pip3 install awscli
      # attach workspace
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:16.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install 
            npm run build
            npm run migrations >> migration_status.txt
            # Hint: The migration output will include "has been executed successfully" if any new migrations were applied.
            cat migration_status.txt

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            cat migration_status.txt
            echo "########"
            if grep -q "has been executed successfully" migration_status.txt; then
              data=1
            else
              data=0
            fi            
            curl -H "Content-Type: text/plain" -H "token: f280d222-8e74-4978-87ef-301abdf89772" --request PUT --data $data https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:8}
  #    # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/node:16.11
    steps:
      # Checkout code from git
      - checkout 
      - run:
           name: Install AWS Tools
           command: |
             # your code here
             pip3 install awscli
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(cat ~/project/.circleci/ansible/backendURL.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
      - run: 
          name: Move dist to bucket
          working_directory: ./frontend
          command: aws s3 sync dist s3://mybucket-${CIRCLE_WORKFLOW_ID:0:8} --delete
      # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
            #branches:
            #  only: [test-feature-branch]
      - configure-infrastructure: 
           requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]